* Fundamentos para projetos de automação

Objetivo: Introduzir conceitos importantes relacionados à automação de testes, entendendo seu proósito e os fatores essenciais para o sucesso de sua implantação juntamente ao ciclo de vida do software.

- O Propósito da automação no processo de teste:

    Ciclo de vida do testes: Planejamento -> Monitoramento e controle -> Análise -> Design/Projeto -> Implementação -> Execução -> Finalização

    A automação como atividade de testes
        -software
        -Documentação
        -Ambientes de teste
        -Dados de teste
    Atividades de teste relacionadas
        - Implementação de casos de testes automatizados
        - Monitoramento e controle de Execução
        - Interpretação, relatório e log de resultados
    Objetivos da automação
        - Melhorar a eficiência do teste
        - Ampliar cobertura de testes
        - Reduzir custo total de testes
        - Diminuir tempo de Execução
        - Aumentar frequência de testes
    Vantagens da automação
        - Teste que não podem ser feitos de maneira manual
        - Complexidade pode anta -> tempo Diminuir
        - Reduz erros humanos na validação
        - Feedback mais rápido
        - Maior confiabilidade
    Desvantagens da automação
        - Custos adicionais
        - Investimento inicial para configuração da arquitetura de testes
        - Investimento na arquitetura do software sob teste
        - Complexidade de codificação
        - Manutenção de testes
    - Fatores de Sucesso Para automação
        Algumas relexões
            - Nem todos os testes podem ou devem ser automatizados
            - A automação de testes não substitui os testes manuais
            - A automação é limitada pela análise do sistema. A Subjetividade do analista/engenheiro é importantes
            - Script de teste automatizado também é código assim como qualquer outro software, portanto, um bom analista deve se preocupar em um código limpo e com boas práticas.
        Arquietura do Projeto de automação
            - A arquitetura de um projeto de automação deve estar alinhada com a arquitetura do produto de software
            - Lembrar que existem requisitoes não-funcionais para testes
            - Envolvimento com desenvolvedores do projeto é essencial para o sucesso da automação
        Testabilidade
            - O produto de software deve ser construido, deve ser modelado
            - pensando no suporte aos testes automatizado
            - Desacoplamento entre camadas
            - Expor módulos/funções/classes para facilitar testes
            - Identificar e analisar módulos que são testáveis faz parte do processo de decisão de automação.
        Estratégias de testes
            - Identificar o conjunto, tipos e níveis de testes automatizados que garantem consistência e cobertura do sistema
        Portfólios de Certificações
            - Existe: Test Automation Engineer
    - Ferramentas de suporte a testes automatizado
        Uso de Framework de Automação de testes
            -Avaliar um bom framework garante benefícios para: 
                - Implementar relatórios de testes
                - Facilitar resolução de problemas
                - Facilitar configuração de Ambiente
                - Documentar casos de testes
                - Rastrear estapas dos casos de testes
                - Facilitar manutenção dos testes
                - Atualização dos testes automatizados
                - Monitorar e restaurar execução dos testes em caso de falha
                

* Arquitetura genérica e design para automação
    - Revisitando conceitos de arquitetura de software
        Objetivos:
            -1. COnceitos genéricos sobre arquitetua de software
            -2. Arquitetura genérica para projetos de automação
            -3. O que considerar antes de iniciar um projeto?
            -4. Abordagens para automação de casos de teste
        
        O que é uma arquitetura de software?
            - Descrição e compreensão dos cmponenetes do sistema, suas estrutura e relações
            - Considerar fatores externos na definição da arquitetura de um sistema
        
        Pensando nos padrões arquiteturais
            - São soluções gerais e reutilizáveis para resolver problemas recorrentes dentro de certo contexto
            - Estão inseridos em um escopo maior do sistema
            - MVC (model,viewer,Controller)
        E os padrões de projetos?
            - São soluções gerais e reutilizáveis para problemas comuns relacionados à construção do projeto de software independente da linguagem
            - São divididos em:
                - Padrões de criação: factory methof, abstract factory, singleton...
                - Padrões estruturais: adapter, composite, facade, proxy...
                - Padrões comportamentais: command, observer, mediator...
                - Extra: http://refactoring.guru/
        SOLID
            - Responsabilidade única: Cada componente deve ter uma única responsabilidade e esta deve ser encapsulada
            - Extensão: Cada componente deve estar aberto para extensão, mas fechado para modificação
            - Substituição: Cada componente deve ser substituível sem afetar o comportamento geral da solução
            - Segregação: É melhor ter componentes específicos do que um componente geral multiuso
            - Inversão de dependência: Os componentes devem depender de abstrações e não de detalhes de mais baixo nível.
    
    - Arquitetura do projeto de automação
        - Canada de geração de testes
            - Criação manual de casos de teste
            - Desenvolvimento, captura ou obtenção de dados de teste
            - Geração automática de cados de teste a partir de modelos
        - Camada de definição de teste
            - Especificação de casos de teste
            - Definição de dados de teste
            - Espeficicaçãode rocedimento de testes
            - Definição de scripts para execução dos casos de teste
            - Conceder acesso às bibliotecas de teste conforme necessário
        - Camada de execução de teste
            - Executar casos de teste automaticamente
            - Registrar execuções 
            - Relatar 
        - Camada de adaptação de teste
            - Controlar ambiente de teste
            - Interagir com sistema a ser testado
            - Monitorar o sistema sendo testado
            - Simular ou emular o ambiente sendo testado
        - Gerenciamento de projeto de solução de testes automatizados
            - Prestar atenção ao gerenciamento de configuração do projeto
            - Versionamento deve seguir boas práticas
            - A extração de métricas deve ser analisada da mesma forma que em uma abordagem manual


    - O que devemos considerar antes de iniciar um projeto
        - Qual atividade ou fase do processo de testes queremos automatizar?
        - Qual nível de teste queremos ter suporte?
        - Qual o tipo de teste?
        - Quem executará e implementará o teste?
        - Quais projetos existem gratuitos e quais podem ser comprados?
        - Quais tecnologias queremos ter suporte? E a complexidade?
        - Que linguagens queremos utilizar?
        - Qual modelo de ciclo de vida do software estamos inseridos?
        - Qual a complexidade de implementação e como afeta o projeto?
        - Será necessário treinamento?

    - Abordagens para automação
        - 1) A solução implementa casos de teste diretamente em scripts de teste automatizados
        - 2) A solução projeta procedimentos de teste e os transforma em scripts automatizados
        - 3) A solução utiliza uma ferramente para traduzir os procedimentos de teste em cripts de teste automatizados
        - 4) A solução utiliza uma ferramenta que gera procedimentos atuomatizados de teste ou traduz os cripts diretamente dos modelos. Maior grau de automação


-


